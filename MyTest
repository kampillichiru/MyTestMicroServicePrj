<dependency>
    <groupId>jakarta.xml.bind</groupId>
    <artifactId>jakarta.xml.bind-api</artifactId>
    <version>3.0.1</version>
</dependency>
<dependency>
    <groupId>org.glassfish.jaxb</groupId>
    <artifactId>jaxb-runtime</artifactId>
    <version>3.0.1</version>
</dependency>


   public static boolean validateXml(String xml, String xsdPath) {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            Schema schema = factory.newSchema(new StreamSource(xsdPath));
            Validator validator = schema.newValidator();
            Source xmlSource = new StreamSource(new StringReader(xml));
            validator.validate(xmlSource);
            return true;
        } catch (Exception e) {
            System.out.println("Validation failed: " + e.getMessage());
            return false;
        }
    }









<dependency>
    <groupId>com.fasterxml.jackson.dataformat</groupId>
    <artifactId>jackson-dataformat-xml</artifactId>
    <version>2.15.0</version>
</dependency>



import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;

public class Person {
    @JacksonXmlProperty(localName = "name")
    private String name;

    @JacksonXmlProperty(localName = "age")
    private int age;

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "Person{name='" + name + "', age=" + age + '}';
    }
}


import com.fasterxml.jackson.dataformat.xml.XmlMapper;

public class XmlToJava {
    public static void main(String[] args) throws Exception {
        String xml = "<person><name>John Doe</name><age>30</age></person>";

        XmlMapper xmlMapper = new XmlMapper();
        Person person = xmlMapper.readValue(xml, Person.class);

        System.out.println(person);
    }
}
