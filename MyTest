import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
public class SecurityConfig {

    @Bean
    public InMemoryUserDetailsManager userDetailsService() {
        UserDetails user = User.withDefaultPasswordEncoder()
                .username("admin")
                .password("password")
                .roles("ADMIN")
                .build();
        return new InMemoryUserDetailsManager(user);
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .requestMatchers(new AntPathRequestMatcher("/my-service/api/ff4j-web-console/**")).hasRole("ADMIN") // Secure FF4j Console
                .requestMatchers(new AntPathRequestMatcher("/my-service/api/ff4j/**")).hasRole("ADMIN") // Secure FF4j API
                .anyRequest().permitAll() // Allow other requests
            )
            .formLogin(withDefaults()) // Enable form-based login
            .httpBasic(withDefaults()); // Enable basic authentication for APIs

        return http.build();
    }
}
