
@Configuration
public class ThreadPoolConfig {

    @Bean
    public Executor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(56); // Number of logical CPUs
        executor.setMaxPoolSize(112); // Double the core pool size for burst loads
        executor.setQueueCapacity(100000); // Capacity for incoming tasks
        executor.setThreadNamePrefix("AggregatorThread-");
        executor.initialize();
        return executor;
    }
}


@Service
public class AggregatorService {

    private final BlockingQueue<String> dataQueue = new LinkedBlockingQueue<>(100000); // Thread-safe queue
    private final Executor taskExecutor;

    @Autowired
    public AggregatorService(Executor taskExecutor) {
        this.taskExecutor = taskExecutor;
    }

    public void startListener(int port) {
        new Thread(() -> {
            try (ServerSocket serverSocket = new ServerSocket(port)) {
                while (true) {
                    Socket socket = serverSocket.accept();
                    String data = readData(socket); // Implement readData to parse incoming packets
                    dataQueue.offer(data); // Add to queue
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }, "FlowListener").start();
    }

    public void processQueue() {
        for (int i = 0; i < 10; i++) {
            taskExecutor.execute(this::processRecords);
        }
    }

    private void processRecords() {
        while (true) {
            try {
                String record = dataQueue.take(); // Retrieve and remove head of the queue
                processRecord(record); // Implement logic for record processing
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }
    }

    private String readData(Socket socket) {
        // Implement the logic to read data from the socket
        return "dummyData";
    }

    private void processRecord(String record) {
        // Business logic for processing each record
        System.out.println(Thread.currentThread().getName() + " processing: " + record);
    }
}


@SpringBootApplication
public class AggregatorApplication {

    @Autowired
    private AggregatorService aggregatorService;

    public static void main(String[] args) {
        SpringApplication.run(AggregatorApplication.class, args);
    }

    @PostConstruct
    public void startAggregation() {
        aggregatorService.startListener(8080); // Start listening on port 8080
        aggregatorService.processQueue();      // Start parallel processing
    }
}
