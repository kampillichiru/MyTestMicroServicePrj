### **JSF Compatibility & Upgrade for WildFly 26.1.3**  

#### **üîç Compatibility of JSF with WildFly 26**
WildFly 26.1.3 **supports Jakarta Faces (JSF) 2.3** by default.  
Since your current version is **JSF 1.2**, you should upgrade to **JSF 2.3** for better compatibility.

- **WildFly 26 ships with:**  
  - **Mojarra 2.3.14.SP01** (Jakarta Faces Reference Implementation)  
  - **Jakarta EE 8 API (JSF 2.3)**  

If your application is **not fully ready for JSF 2.3**, you can manually install **JSF 2.2** as a middle step.

---

### **üî• Minimal Steps to Upgrade JSF (1.2 ‚Üí 2.3)**

#### **Step 1: Remove Old JSF Dependencies**
Since WildFly **already includes** JSF 2.3, you **do not need to bundle JSF** inside your `WEB-INF/lib`.  
Remove the following from `pom.xml` (if using Maven) or `WEB-INF/lib` (if manually added):
```xml
<dependency>
    <groupId>javax.faces</groupId>
    <artifactId>jsf-api</artifactId>
    <version>1.2_15</version>
    <scope>provided</scope>
</dependency>

<dependency>
    <groupId>javax.faces</groupId>
    <artifactId>jsf-impl</artifactId>
    <version>1.2_15</version>
</dependency>
```

#### **Step 2: Update JSF Dependencies to 2.3**  
If your project uses Maven, **add JSF 2.3 dependencies**:
```xml
<dependency>
    <groupId>javax.faces</groupId>
    <artifactId>javax.faces-api</artifactId>
    <version>2.3</version>
    <scope>provided</scope>
</dependency>

<dependency>
    <groupId>org.glassfish</groupId>
    <artifactId>javax.faces</artifactId>
    <version>2.3.14</version>
</dependency>
```
**(Optional)** If you want to use **WildFly‚Äôs built-in JSF**, exclude JSF from your app by adding:
```xml
<exclusions>
    <exclusion>
        <groupId>org.glassfish</groupId>
        <artifactId>javax.faces</artifactId>
    </exclusion>
</exclusions>
```
üëâ **WildFly will automatically use Mojarra 2.3.14 from its module system.**

---

#### **Step 3: Update `web.xml` (If Needed)**
Modify your **`web.xml`** to use **JSF 2.3 FaceServlet**:
```xml
<servlet>
    <servlet-name>FacesServlet</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
    <servlet-name>FacesServlet</servlet-name>
    <url-pattern>*.xhtml</url-pattern>
</servlet-mapping>
```
- Change `.jsp` to `.xhtml` if using Facelets.
- **Remove any JSF 1.2-specific configurations.**

---

#### **Step 4: Update `faces-config.xml`**
- Locate your `faces-config.xml` (inside `WEB-INF`).
- Change **JSF version**:
```xml
<faces-config version="2.3"
    xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
        http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_3.xsd">
</faces-config>
```
- **Remove JSF 1.2-specific configurations** like:
  ```xml
  <application>
      <view-handler>com.sun.facelets.FaceletViewHandler</view-handler>
  </application>
  ```
  (Facelets is now built-in, no need for a custom view handler.)

---

#### **Step 5: Migrate JSF Code (If Needed)**
1. **Replace old JSF tags (`.jsp`) with Facelets (`.xhtml`)**
   - **JSF 1.2 (JSP-based)**:
     ```jsp
     <%@ taglib uri="http://java.sun.com/jsf/core" prefix="f" %>
     ```
   - **JSF 2.3 (Facelets-based)**:
     ```xhtml
     xmlns:h="http://xmlns.jcp.org/jsf/html"
     xmlns:f="http://xmlns.jcp.org/jsf/core"
     ```

2. **Remove `@ManagedBean`, replace with CDI (`@Named`)**
   ```java
   @ManagedBean(name="myBean")
   ```
   becomes:
   ```java
   @Named("myBean")
   @RequestScoped
   ```

3. **Update EL expressions (`#{bean}` instead of `${bean}`)**
   ```xhtml
   <h:outputText value="#{myBean.name}" />
   ```

---

#### **Step 6: Deploy on WildFly**
1. Package your `.war` file.  
2. Deploy it in **WildFly**:
   - Copy `.war` to `wildfly-26.1.3/standalone/deployments/`
   - Start WildFly:
     ```sh
     ./standalone.sh -b 0.0.0.0
     ```

---

### **üöÄ Summary**
‚úî **Remove old JSF 1.2 dependencies**  
‚úî **Use WildFly‚Äôs built-in JSF 2.3** (or manually add `javax.faces 2.3.14`)  
‚úî **Update `web.xml` and `faces-config.xml`**  
‚úî **Migrate JSP ‚Üí Facelets (`.xhtml`)**  
‚úî **Test and deploy in WildFly**  

This ensures a **smooth JSF upgrade** from **1.2 ‚Üí 2.3** with minimal changes. üöÄ


## **Challenges in Migration from WebSphere 7 to WildFly 26**  

Migrating from an old technology stack to a modernized one comes with multiple challenges, especially considering the differences in application servers, Java versions, frameworks, and architecture.

---

## **Key Challenges in Migration**  

1. **JDK Upgrade (1.8 ‚Üí 11+)**
   - **Challenges:**
     - Deprecated and removed APIs (e.g., `javax.xml.bind`, `javax.activation`, `SecurityManager` deprecations)
     - Changes in classloading behavior and default garbage collector
     - Need for Java modules (`java.base`, `java.sql`, etc.) if strong encapsulation is required
   - **Mitigation:**
     - Refactor code using removed APIs
     - Use alternatives for JAXB, JAX-WS, and CORBA (`jakarta.xml.bind`, `jakarta.activation`)

2. **Hibernate Upgrade (3.x ‚Üí 5.x)**
   - **Challenges:**
     - EntityManager changes (`SessionFactory` and transaction handling updated)
     - `hibernate.cfg.xml` configuration changes
     - Query language (HQL) improvements (old syntax may break)
     - Lazy loading behavior differences
   - **Mitigation:**
     - Update configurations and rewrite HQL queries
     - Adapt to changes in transaction management

3. **JSF Upgrade (1.2 ‚Üí 2.x)**
   - **Challenges:**
     - Backward compatibility issues (e.g., `javax.faces` package changes)
     - Navigation rules and expression language updates
     - Component libraries (`RichFaces`, `PrimeFaces`) may require updates
   - **Mitigation:**
     - Rewrite JSF navigation and component references
     - Test and validate managed beans

4. **Application Server Migration (WebSphere 7 ‚Üí WildFly 26)**
   - **Challenges:**
     - WebSphere-specific configurations (JNDI, datasources) need migration
     - Security model differences (authentication, role mappings)
     - Deployment descriptor changes (`web.xml`, `server.xml`)
   - **Mitigation:**
     - Use WildFly CLI to configure datasources and security realms
     - Update deployment descriptors (`standalone.xml`, `jboss-web.xml`)

5. **CICS Calls Compatibility**
   - **Challenges:**
     - CICS integration depends on WebSphere‚Äôs mainframe connectors
     - WildFly may require custom implementations or alternative APIs
   - **Mitigation:**
     - Use **CICS Transaction Gateway** with WildFly
     - Convert to REST-based CICS calls if feasible

6. **WebSphere-Specific Features**
   - **Challenges:**
     - WebSphere extensions for transaction management, security, and JNDI
     - External libraries may be incompatible with WildFly
   - **Mitigation:**
     - Identify and replace proprietary WebSphere APIs
     - Test third-party libraries for compatibility

---

## **Pros & Cons: Rewrite vs Upgrade**

| Approach | Pros | Cons |
|----------|------|------|
| **Upgrade (Make Existing Code Compatible)** | ‚úÖ Faster implementation ‚úÖ Retains existing business logic ‚úÖ Lower risk of defects | ‚ùå Technical debt remains ‚ùå Future upgrades will be difficult ‚ùå Workarounds may cause performance issues |
| **Rewrite (Modernization)** | ‚úÖ Cleaner, maintainable code ‚úÖ Leverages modern frameworks & best practices ‚úÖ Future-proof (cloud-native, microservices) | ‚ùå High initial cost & effort ‚ùå Requires extensive testing & validation ‚ùå Longer development cycle |

---

## **Recommendation**
- If **time & cost** are constraints, an **upgrade** is preferable.
- If the system is expected to scale and evolve, a **rewrite** is the better long-term choice.

Would you like a **phase-wise migration strategy** for better risk management?



<?xml version="1.0" encoding="UTF-8"?>
<faces-config xmlns="http://xmlns.jcp.org/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
              http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_3.xsd"
              version="2.3">
</faces-config>

