An **audit table** is a separate table used to store historical records of changes (insert, update, delete) for a given entity. Hereâ€™s how you can set up an **audit table** in Spring Boot with JPA:

---

### Steps to Create an Audit Table

#### 1. **Define the Main Entity**
For example, the main entity is `MyEntity`:

```java
import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
public class MyEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String data;

    // Getters and Setters
}
```

---

#### 2. **Define the Audit Table Entity**
Create a new entity for storing audit records:

```java
import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
public class MyEntityAudit {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long auditId;

    private Long entityId;

    private String data;

    private String operation; // INSERT, UPDATE, DELETE

    private String modifiedBy;

    private LocalDateTime modifiedDate;

    // Getters and Setters
}
```

---

#### 3. **Implement an Entity Listener**
Define an entity listener to capture changes to `MyEntity` and store them in the audit table:

```java
import jakarta.persistence.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;

@Component
public class MyEntityListener {

    @Autowired
    private MyEntityAuditRepository auditRepository;

    @PostPersist
    @PostUpdate
    @PostRemove
    public void audit(Object object) {
        if (object instanceof MyEntity entity) {
            MyEntityAudit audit = new MyEntityAudit();
            audit.setEntityId(entity.getId());
            audit.setData(entity.getData());
            audit.setModifiedBy("AdminUser"); // Replace with actual user logic
            audit.setModifiedDate(LocalDateTime.now());

            if (((EntityManager) object).contains(entity)) {
                audit.setOperation("UPDATE");
            } else {
                audit.setOperation("INSERT");
            }

            auditRepository.save(audit);
        }
    }
}
```

---

#### 4. **Update the Main Entity with the Listener**
Add `@EntityListeners` to the `MyEntity` class to enable auditing:

```java
@Entity
@EntityListeners(MyEntityListener.class)
public class MyEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String data;

    // Getters and Setters
}
```

---

#### 5. **Create the Repository for the Audit Table**
Define a repository for saving and retrieving audit records:

```java
import org.springframework.data.jpa.repository.JpaRepository;

public interface MyEntityAuditRepository extends JpaRepository<MyEntityAudit, Long> {
}
```

---

#### 6. **Perform CRUD Operations**
Use the `MyEntityRepository` for CRUD operations. The `MyEntityListener` will automatically create audit entries in the `MyEntityAudit` table.

---

### Example Database Tables

#### Main Table: `my_entity`
| id  | data         |
|-----|--------------|
| 1   | Test Data 1  |

---

#### Audit Table: `my_entity_audit`
| audit_id | entity_id | data         | operation | modified_by | modified_date        |
|----------|-----------|--------------|-----------|-------------|----------------------|
| 1        | 1         | Test Data 1  | INSERT    | AdminUser   | 2025-01-10 09:30:00 |
| 2        | 1         | Updated Data | UPDATE    | AdminUser   | 2025-01-10 10:00:00 |

- **`operation`**: Tracks whether the change was an `INSERT`, `UPDATE`, or `DELETE`.
- **`modified_by` and `modified_date`**: Tracks who made the change and when.

---

This setup ensures you have a dedicated table (`my_entity_audit`) to store all historical changes for the `my_entity` table.
