name: Release Request
description: Submit a request to release selected microservices
title: "Release Request - [VERSION]"
labels: ["release-request"]
body:
  - type: input
    attributes:
      label: Version
      description: "Enter the release version (e.g., 1.0.8)"
      placeholder: "1.0.8"
      required: true
      value: ""
  - type: dropdown
    attributes:
      label: Environment
      description: "Select the environment"
      options:
        - uat
        - prod
      required: true
  - type: checkboxes
    attributes:
      label: "Select services for this release"
      options:
        - user-service
        - order-service
        - payment-service
        - inventory-service
        - frontend
      required: true




name: Release Microservices

on:
  issues:
    types: [opened]

jobs:
  release:
    if: github.event.issue.labels.*.name contains 'release-request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Parse issue data
        id: parse
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "$ISSUE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Extract version
        id: version
        run: |
          VERSION=$(echo "$ISSUE_BODY" | grep -oP '(?<=Version: ).*')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract environment
        id: env
        run: |
          ENVIRONMENT=$(echo "$ISSUE_BODY" | grep -oP '(?<=Environment: ).*')
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Extract services
        id: services
        run: |
          SERVICES=$(echo "$ISSUE_BODY" | grep -oP '(?<=Select services for this release: ).*' | tr ',' '\n')
          echo "SERVICES=$SERVICES" >> $GITHUB_ENV

      - name: Update manifest
        run: |
          MANIFEST="./manifests/$ENVIRONMENT/release-manifest.yaml"
          cp ./manifests/template-manifest.yaml $MANIFEST
          for svc in $SERVICES; do
            yq e -i "(.services[] | select(.name==\"$svc\")).image = \"myorg/$svc:$VERSION\"" $MANIFEST
          done

      - name: Deploy via ArgoCD
        run: |
          argocd app sync my-app --local $MANIFEST

